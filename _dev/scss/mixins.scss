// Default browser support
$defaultwebkitsupport: true;
$defaultfirefoxsupport: true;
$defaultexplorersupport: true;
$defaultoperasupport: true;

@mixin clearfix() {
  &::after,
  &::before {
    content: '';
    display: table;
    width: 100%;
  }
}

@mixin fontawesome() {
  display: inline-block;
  font: normal normal normal 14px/1 FontAwesome; // shortening font declaration
  font-size: inherit; // can't have font-size inherit on line above, so need to override
  text-rendering: auto; // optimizelegibility throws things off #1094
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin rgba($color, $transparent) {
  background-color: rgba($color, $transparent);
}
//============================================================
//
// prefix-property
//
// @param property:  string
// @param value:  string
// @param supportwebkit:  boolean
// @param supportfirefox :  boolean
// @param supportexplorer:  boolean
// @param supportopera:  boolean
//
//============================================================

@mixin prefix-property($property, $value, $supportwebkit: $defaultwebkitsupport, $supportfirefox: $defaultfirefoxsupport, $supportexplorer: $defaultexplorersupport, $supportopera: $defaultoperasupport) {

  @if $supportwebkit{ -webkit-#{$property}: $value; }
  @if $supportfirefox  {-moz-#{$property}: $value; }
  @if $supportexplorer { -ms-#{$property}: $value; }
  @if $supportopera{  -o-#{$property}: $value; }

  #{$property}: $value;
}



//============================================================
//
// prefix-value
//
// @param property:  string
// @param value:  string
// @param supportwebkit:  boolean
// @param supportfirefox :  boolean
// @param supportexplorer:  boolean
// @param supportopera:  boolean
//
//============================================================

@mixin prefix-value($property, $value, $supportwebkit: $defaultwebkitsupport, $supportfirefox: $defaultfirefoxsupport, $supportexplorer: $defaultexplorersupport, $supportopera: $defaultoperasupport) {

  @if $supportwebkit{ #{$property}: -webkit-#{$value}; }
  @if $supportfirefox  { #{$property}: -moz-#{$value}; }
  @if $supportexplorer { #{$property}: -ms-#{$value}; }
  @if $supportopera{ #{$property}: -o-#{$value}; }

  #{$property}: $value;
}



//============================================================
//
// display-box
//
// @see http://www.w3.org/TR/css3-flexbox/
// @see http://www.html5rocks.com/en/tutorials/flexbox/quick/
//
//============================================================

@mixin display-box {
  @include prefix-value(display, box);
}



//============================================================
//
// box-orient
//
// @param value:  horizontal |
//vertical|
//inherit
//
// @see http://www.w3.org/TR/css3-flexbox/
// @see http://www.html5rocks.com/en/tutorials/flexbox/quick/
//
//============================================================

@mixin box-orient($arguments) {
  @include prefix-property(box-orient, unquote($arguments));
}



//============================================================
//
// box-pack
//
// @param value:  start|
//end |
//center  |
//justify
//
// @see http://www.w3.org/TR/css3-flexbox/
// @see http://www.html5rocks.com/en/tutorials/flexbox/quick/
//
//============================================================

@mixin box-pack($arguments) {
  @include prefix-property(box-pack, unquote($arguments));
}



//============================================================
//
// box-align
//
// @param value:  start|
//end  |
//center|
//baseline |
//stretch
//
// @see http://www.w3.org/TR/css3-flexbox/
// @see http://www.html5rocks.com/en/tutorials/flexbox/quick/
//
//============================================================

@mixin box-align($arguments) {
  @include prefix-property(box-align, unquote($arguments));
}



//============================================================
//
// box-flex
//
// @param value:  0 | integer
//
// @see http://www.w3.org/TR/css3-flexbox/
// @see http://www.html5rocks.com/en/tutorials/flexbox/quick/
//
//============================================================

@mixin box-flex($arguments) {
  @include prefix-property(box-flex, unquote($arguments));
}



//============================================================
//
// box-sizing
//
// @param value:  content-box |
//padding-box |
//border-box  |
//inherit
//
// @see http://www.w3.org/TR/css3-ui/#box-sizing
//
//============================================================

@mixin box-sizing($arguments) {
  @include prefix-property(box-sizing, unquote($arguments));
}



//============================================================
//
// user-select
//
// @param value:  none |
//text |
//toggle|
//element  |
//elements |
//all  |
//inherit
//
// @see http://www.w3.org/TR/2000/WD-css3-userint-20000216#user-select
//
//============================================================

@mixin user-select($arguments) {
  @include prefix-property(user-select, unquote($arguments));
  @include prefix-property(touch-callout, unquote($arguments), true, false, false, false);
}



//============================================================
//
// appearance
//
// @param value:  button |
//push-button|
//hyperlink  |
//radio-button|
//checkbox|
//pop-up-menu|
//list-menu  |
//radio-group|
//checkbox-group |
//field  |
//password|
//normal |
//inherit|
//none
//
// @see http://www.w3.org/TR/css3-ui/#appearance
// @see http://www.cssportal.com/css-properties/appearance.htm
// @see https://developer.mozilla.org/en/css/-moz-appearance
//
//============================================================

@mixin appearance($arguments) {
  @include prefix-property(appearance, unquote($arguments), true, true, false, false);
}



//============================================================
//
// border-radius
//
// @param top-left-radius:  px, em, %
// @param top-right-radius:  px, em, %
// @param bottom-right-radius:  px, em, %
// @param bottom-left-radius :  px, em, %
//
// @see http://www.w3.org/TR/css3-background/#border-radius
//
//============================================================

@mixin border-radius($arguments) {
  @include prefix-property(border-radius, unquote($arguments));
  @include prefix-property(background-clip, padding-box, true, true, false, false);
}



//============================================================
//
// box-shadow
//
// @param color:  #000, rgba, hsla
// @param horizontal-offset:  px, em
// @param vertical-offset:  px, em
// @param blur-radius:  px, em
// @param spread-distance:  px, em
// @param inset:  inset
//
// @see http://www.w3.org/TR/css3-background/#box-shadow
//
//============================================================

@mixin box-shadow($arguments) {
  @include prefix-property(box-shadow, unquote($arguments));
}



//============================================================
//
// text-shadow
//
// @param color:  #000, rgba, hsla
// @param horizontal-offset:  px, em
// @param vertical-offset:  px, em
// @param blur-radius:  px, em
//
// @see http://www.w3.org/TR/css3-text/#text-shadow
//
//============================================================

@mixin text-shadow($arguments) {
  @include prefix-property(text-shadow, unquote($arguments), false, false, false, false);
}



//============================================================
//
// linear-gradient
//
// @param angle:  top, left, 90deg
// @param colorA :  #000 0%, red 0%
// @param colorb :  #000 50%, red 50%
// @param colorc :  #000 100%, red 100%
//
// @example @include linear-gradient("top, crimson 0%, black 100%");
//
// @see http://dev.w3.org/csswg/css3-images/#linear-gradients
//
//============================================================

@mixin linear-gradient($arguments) {
  @include prefix-value(background-image, linear-gradient(unquote($arguments)));
}



//============================================================
//
// radial-gradient
//
// @param position:  center, left top, 50% 50%
// @param shape:  circle, ellipse, 100% 75%
// @param size:  closest-side|
//farthest-side|
//closest-corner  |
//farthest-corner |
// @param colorA :  #000 0%, red 0%
// @param colorb :  #000 50%, red 50%
// @param colorc :  #000 100%, red 100%
//
// @example @include radial-gradient("50% 50%, circle, crimson 0%, black 100%");
//
// @see http://dev.w3.org/csswg/css3-images/#radial-gradients
//
//============================================================

@mixin radial-gradient($arguments) {
  @include prefix-value(background-image, radial-gradient(unquote($arguments)));
}



//============================================================
//
// transform
//
// @param functions:  matrix()
//:  translate()
//:  scale()
//:  rotate()
//:  skew()
//
// @see http://www.w3.org/TR/css3-2d-transforms/
//
//============================================================

@mixin transform($arguments) {
  @include prefix-property(transform, unquote($arguments));
}



//============================================================
//
// transform-origin
//
// @param value:  50% 50% |
//left|
//center  |
//right|
//px  |
//em  |
//%
//
// @see http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property
//
//============================================================

@mixin transform-origin($arguments) {
  @include prefix-property(transform-origin, unquote($arguments));
}



//============================================================
//
// transform-style
//
// @param value:  preserve-3d | flat
//
// @see http://www.w3.org/TR/css3-3d-transforms/#transform-style-property
//
//============================================================

@mixin transform-style($arguments) {
  @include prefix-property(transform-style, unquote($arguments));
}



//============================================================
//
// perspective
//
// @param value:  none | 0, 1, 100, 1000, etc
//
// @see http://www.w3.org/TR/css3-3d-transforms/#perspective-property
//
//============================================================

@mixin perspective($arguments) {
  @include prefix-property(perspective, unquote($arguments));
}



//============================================================
//
// perspective-origin
//
// @param value:  left|
//center |
//right  |
//px |
//em |
//%
//
// @see http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property
//
//============================================================

@mixin perspective-origin($arguments) {
  @include prefix-property(perspective-origin, unquote($arguments));
}



//============================================================
//
// backface-visibility
//
// @param value:  visible | hidden
//
// @see http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property
//
//============================================================

@mixin backface-visibility($arguments) {
  @include prefix-property(backface-visibility, unquote($arguments));
}



//============================================================
//
// matrix
//
// @param a:  Number
// @param b:  Number
// @param c:  Number
// @param d:  Number
// @param e:  Number
// @param f:  Number
//
// http://www.w3.org/TR/css3-3d-transforms/#transform-functions
//
//============================================================

@mixin matrix($arguments) {
  @include transform(matrix(unquote($arguments)));
}



//============================================================
//
// translate
//
// @param translate-x:  px
// @param translate-y:  px
//
// http://www.w3.org/TR/css3-3d-transforms/#transform-functions
//
//============================================================

@mixin translate($arguments) {
  @include transform(translate(unquote($arguments)));
}



//============================================================
//
// scale
//
// @param scale-x:  .5, 2, etc
// @param scale-y:  .5, 2, etc
//
// http://www.w3.org/TR/css3-3d-transforms/#transform-functions
//
//============================================================

@mixin scale($arguments) {
  @include transform(scale(unquote($arguments)));
}



//============================================================
//
// rotate
//
// @param angle:  0deg
//
// http://www.w3.org/TR/css3-3d-transforms/#transform-functions
//
//============================================================

@mixin rotate($arguments) {
  @include transform(rotate(unquote($arguments)));
}



//============================================================
//
// skew
//
// @param angle-x:  0deg
// @param angle-y:  0deg
//
// http://www.w3.org/TR/css3-3d-transforms/#transform-functions
//
//============================================================

@mixin skew($arguments) {
  @include transform(skew(unquote($arguments)));
}



//============================================================
//
// transition
//
// @param property:  all, left, opacity, etc
// @param duration:  1s, 1000ms
// @param timing-function:  linear, ease-in-out, etc
// @param delay:  1s, 1000ms
//
// @see http://www.w3.org/TR/css3-transitions/
//
//============================================================

@mixin transition($arguments) {
  @include prefix-property(transition, unquote($arguments));
}



//============================================================
//
// animation
//
// @param name:  string
// @param duration:  .5s, 1.8s, 2000ms
// @param timing-function:  ease |
//linear|
//ease-in  |
//ease-out |
//ease-in-out  |
//step-start|
//step-end |
//cubic-bezier
// @param delay:  .5s, 1.8s, 2000ms
// @param iteration-count:  infinite |
//number
// @param direction:  normal|
//reverse  |
//alternate|
//alternate-reverse
// @param fill mode:  none |
//forwards |
//backwards|
//both
//
// @see http://www.w3.org/TR/css3-animations/
//
//============================================================

@mixin animation($arguments) {
  @include prefix-property(animation, unquote($arguments));
}



//============================================================
//
// easing
//
// Thanks to Robert Penner for his sterling work on easing,
// and to Matthew Lein for converting these functions into
// approximated cubic-bezier functions. Respect.
//
// @see http://robertpenner.com/
// @see http://matthewlein.com/ceaser/
//
//============================================================

// cubic
$easeincubic: cubic-bezier(.550, .055, .675, .190);
$easeoutcubic: cubic-bezier(.215, .610, .355, .000);
$easeinoutcubic: cubic-bezier(.645, .045, .355, 1);

// circ
$easeincirc: cubic-bezier(.600, .040, .980, .335);
$easeoutcirc: cubic-bezier(.075, .820, .165, 1);
$easeinoutcirc: cubic-bezier(.785, .135, .150, .860);

// expo
$easeinexpo: cubic-bezier(.950, .050, .795, .035);
$easeoutexpo: cubic-bezier(.190, 1, .220, 1);
$easeinoutexpo: cubic-bezier(1, .000, .000, 1);

// quad
$easeinquad: cubic-bezier(.550, .085, .680, .530);
$easeoutquad: cubic-bezier(.250, .460, .450, .940);
$easeinoutquad: cubic-bezier(.455, .030, .515, .955);

// quart
$easeinquart: cubic-bezier(.895, .030, .685, .220);
$easeoutquart: cubic-bezier(.165, .840, .440, 1);
$easeinoutquart: cubic-bezier(.770, .000, .175, 1);

// quint
$easeinquint: cubic-bezier(.755, .050, .855, .060);
$easeoutquint: cubic-bezier(.230, 1, .320, 1);
$easeinoutquint: cubic-bezier(.860, .000, .070, 1);

// sine
$easeinsine: cubic-bezier(.470, .000, .745, .715);
$easeoutsine: cubic-bezier(.390, .575, .565, 1);
$easeinoutsine: cubic-bezier(.445, .050, .550, .950);

// back
$easeinback: cubic-bezier(.600, -.280, .735, .045);
$easeoutback: cubic-bezier(.175, .885, .320, 1.275);
$easeinoutback: cubic-bezier(.680, -.550, .265, 1.550);
